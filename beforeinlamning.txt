Händelseförlopp: 

Skapade muminbase.mjs & mumin.mjs.

db/mongodb/server.js - körde node db/mongodb/server.js för att se om det gick att nå databasen från server.js, det gick.

Nästa steg var att bara klistra in det som behövdes i server.js in i app.mjs och se om man kunde
nå databasen därifrån. det var bland annat findInCollection, lite mongo importer högst upp samt att skapa en route liknande den i server.js
som hette /list.

Kunde nå databasen från app.mjs, därifrån flyttade jag ut funktionaliteten i olika moduler, dvs: mumin.mjs och muminbase.mjs
Först var det allt in i mumin.mjs, sen när det fungerade därifrån så flyttade jag ut funktionaliteten för uppkopplingen till databsen till muminbase.mjs.

Sen blev det att snurra runt en hel del innan det kom fram att "collectionName" inte är "mumin" utan "crowd."
Detta kom fram efter att ha kikat på argumenten till findInCollection(dsn, "crowd", {}, {}) osv.

- Börja ta en halvtimme att kommentera vad all kod gör. delar upp det mest för vår egna skull att
ha koll på vad grejerna gör.

Börja skriva typ 1-2 tester bara för att komma igång

Efter lunch: Skapa en CI-kedja med hjälp av GitHub Actions.

1&2 från kravspecen är klar.

Kolla hur useEffect kan appliceras i vår app - be chatGPT och läsa på om anvädningsområdet för useEffect.
Snygga till css: större label och input-textruta, kanske lägger det i mitten och fixar till knappar.
Allmänt se över layouten och placering för dokumentet.
Se till att uppdatera CORS så att säkerheten blir större.
Kika på CI-kedjan
Titta på tester, skriva några fler tester.
Se över vilka delar vi har tester för - titta på Emils föreläsning om tester.
Statiskt kodvalidering - installera eslint så att saker blir snygga.


KAN KIKA PÅ
app - 

23-28

// app.use(cors({
//     // origin: 'http://localhost:3000'
//     // origin: 'https://www.student.bth.se/~olrs23/editor/'
// }));

app.use(cors());